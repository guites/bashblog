<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Blog do guilherme</title><link>https://guilhermegarcia.dev/blog/index.html</link>
<description>programação e outras coisas menos úteis</description><language>en</language>
<lastBuildDate>Tue, 22 Nov 2022 12:21:54 -0300</lastBuildDate>
<pubDate>Tue, 22 Nov 2022 12:21:54 -0300</pubDate>
<atom:link href="https://guilhermegarcia.dev/blog/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Making home of the WSL 2
</title><description><![CDATA[

<p>Having recently migrated from Ubuntu to Windows as my work machine, many of the features that made my system feel like home were missing.</p>

<p>This post serves as a collection of solutions I found (and some I've adapted) from the web. Cheers!</p>

<h2>Correctly installing Docker under WSL</h2>

<p>You do not (and should not) install anything Docker related inside your WSL instances. Instead, you can use the Docker Desktop WSL 2 Backend, which will take care of integrating both systems, and running Docker both in your Windows and in your WSL instances.</p>

<p>Make sure you have WSL 2 installed. You can check, in PowerShell, running</p>

<pre><code>    wsl -l -v
</code></pre>

<p>If you see output like this</p>

<pre><code>    PS C:\Users\guites&gt; wsl -l -v
      NAME                   STATE           VERSION
    * Ubuntu-22.04           Running         2
</code></pre>

<p>It means you are all set. If your <code>version</code> column shows only version 1, you can <a href="https://learn.microsoft.com/en-us/windows/wsl/install#upgrade-version-from-wsl-1-to-wsl-2">follow the official documentation</a> to upgrade your wsl from version 1 to 2.</p>

<p>Then, you need to change the version used by your distro (in powershell):</p>

<pre><code>    wsl --set-version Ubuntu-22.04 2
</code></pre>

<p>Now, if you have previously installed docker directly from inside wsl, using for example the <a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">docker engine for ubuntu documentation</a>, I strongly recommend uninstalling it completely.</p>

<p><a href="https://docs.docker.com/desktop/windows/wsl/">This post</a> goes into great detail about how you can completely remove old docker versions from wsl.</p>

<p>I found the following commands to be the only ones necessary (inside WSL):</p>

<pre><code>    sudo apt-get remove docker docker-engine docker.io containerd runc
    sudo rm -rf /var/lib/docker /etc/docker /etc/apparmor.d/docker /var/run/docker.sock /usr/local/bin/docker-compose /etc/docker
    sudo groupdel docker
</code></pre>

<p>After removing Docker from WSL (or in case you didn't have it installed in the first place), make sure to uninstall Docker from your Windows also.</p>

<p>After that, proceed with the instalation of <a href="https://docs.docker.com/desktop/windows/wsl/">Docker Desktop WSL 2 backend on Windows</a>.</p>

<p>Docker will create two distinct WSL containers, that can be seems running the following command from PowerShell:</p>

<pre><code>    wsl -l -v


    PS C:\Users\guites&gt; wsl -l -v
      NAME                   STATE           VERSION
    * Ubuntu-22.04           Running         2
      docker-desktop         Running         2
      docker-desktop-data    Running         2
</code></pre>

<p>They will be responsible for managing the communication between windows and wsl. You do not need to install anything Docker related inside of WSL.</p>

<h2>Acessing localhost from within a docker container</h2>

<p>If you have a docker container inside WSL running some application on localhost, and want to access it from another docker container inside WSL, you won't be able to reach it from <code>http://localhost</code>.</p>

<p>You will have to use your machine IP. You can find it by running</p>

<pre><code>ip addr | grep eth0

: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
    inet 174.86.26.335/20 brd 174.86.25.255 scope global eth0
    ^-------------^ ====&gt; use this IP instead of localhost
</code></pre>

<p>Inside wsl. (<a href="https://superuser.com/a/1642352">source</a>)</p>

<h2>Copying files to the clipboard</h2>

<p>You will not be able to run <code>xclip</code> or <code>xsel</code>, as you would in regular ubuntu.</p>

<p>Instead, you can access the <code>.exe</code> file responsible for copying in windows directly.</p>

<p>To copy the contents of a file <code>list-of-things.txt</code></p>

<pre><code>    cat list-of-things.txt | clip.exe
</code></pre>

<p>In this situations I like to create an alias so that I can call the same command name on both my linux and windows machine.</p>

<pre><code>    echo "alias ,copy='clip.exe'" &gt;&gt; ~/.bash_aliases
    source ~/.bash_aliases
</code></pre>

<p>Now, you can copy the output of any command by running, for example</p>

<pre><code>    ls -l | ,copy
</code></pre>

<p>And hit <kbd>ctrl + v</kbd> where you need it.</p>

<h2>Opening files and the browser from WSL terminal</h2>

<p>There are many possible solutions, but the most straightforward seems to be creating an alias pointing to your browser and explorer executables.</p>

<p><strong>For the browser</strong>, you first need to find where the application binary lives in your Windows machine.</p>

<p>For firefox, you can do this by opening a new page, going to <code>about:support</code> and scrolling down to <code>Application binary</code> (right below <code>Operational System</code>).</p>

<p>Mine is <code>C:\Program Files\Mozilla Firefox\firefox.exe</code>. But you must make a few changes to that path.</p>

<ol>
<li>Change backslashes into forward slashes: <code>C:/Program Files/Mozilla Firefox/firefox.exe</code></li>
<li>Remove the <code>:</code> from the path: <code>C/Program Files/Mozilla Firefox/firefox.exe</code></li>
<li>Escape the spaces: <code>C/Program\ Files/Mozilla\ Firefox/firefox.exe</code></li>
<li>Lowercase that C: <code>c/Program\ Files/Mozilla\ Firefox/firefox.exe</code></li>
<li>(First check if you need it) append /mnt to the path: <code>/mnt/c/Program\ Files/Mozilla\ Firefox/firefox.exe</code></li>
</ol>

<p>Check that you can open it by running it in the WSL terminal:</p>

<pre><code>    /mnt/c/Program\ Files/Mozilla\ Firefox/firefox.exe`
</code></pre>

<p>If everything goes well, create an alias</p>

<pre><code>    echo "alias ,firefox='/mnt/c/Program\ Files/Mozilla\ Firefox/firefox.exe'" &gt;&gt; ~/.bash_aliases
    source ~/.bash_aliases
</code></pre>

<p>Test it by opening up an URL</p>

<pre><code>    ,firefox https://guilhermegarcia.dev/blog
</code></pre>

<p><strong>For the files</strong>, you can simply use <code>explorer.exe</code>. In regular Ubuntu, you would use something like <code>xdg-open</code> or simply <code>open</code>, but the environment is not fully configured on the default WSL installation. Instead, lets create an alias!</p>

<pre><code>    echo "alias ,open='explorer.exe'" &gt;&gt; ~/.bash_aliases
    source ~/.bash_aliases
</code></pre>

<p>And test it by opening some file</p>

<pre><code>    echo "Contents" &gt; file.txt
    ,open file
</code></pre>

<p>You should see your friendly neighborhood notepad pop up :P.</p>

<p><a href="https://stackoverflow.com/questions/52691835/wsl-ubuntu-how-to-open-localhost-in-browser-from-bash-terminal">source</a></p>

<h2>Disable the beep</h2>

<p>That goddamn beep ( ` ω ´ ).</p>

<p>You can disable it <strong>from inside WSL</strong> by adding a <code>set bell-style none</code> in the <code>/etc/inputrc</code> file. (<a href="https://stackoverflow.com/a/36726662">source</a>)</p>

<p>Note that if you use vim, you will also have to add the following to your ~/.vimrc</p>

<pre><code>    set visualbell
    set t_vb=
</code></pre>

<p>You can also disable it <strong>from outside WSL</strong> (as a brute force solution) by openning the Volme Mixer in Windows and muting each WSL terminal window.</p>

<h2>Conclusion</h2>

<p>These are the adjustments I've made to my WSL so far. If you have any additional tips or comments, please send them to my <a href="mailto:gui.garcia67@gmail.com">email address</a>. Thanks!</p>

<p>Tags: <a href='tag_windows.html'>windows</a>, <a href='tag_wsl.html'>wsl</a></p>
<!-- text end -->
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/making-home-of-the-wsl-2.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/making-home-of-the-wsl-2.html'><span id='count-23261'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/making-home-of-the-wsl-2.html</link>
<guid>https://guilhermegarcia.dev/blog/./making-home-of-the-wsl-2.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Tue, 22 Nov 2022 12:21:09 -0300</pubDate></item>
<item><title>
House cleaning com git
</title><description><![CDATA[

<p>Nesse post eu quero compartilhar com vocês algumas operações que eu tive que realizar em uns repositórios antigos, que estavam mal gerenciados e abandonados, pra que eu pudesse voltar a desenvolver neles.</p>

<p>As coisas que eu precisei aprender a fazer foram as seguintes:</p>

<ul>
<li>Listar autores de um repositório</li>
<li>Filtrar os commits do repositório por autor, pra ver o que cada um contribuiu</li>
<li>Relacionar combinações de autores/email diferentes de um mesmo usuário (usando o arquivo <code>.mailmap</code>)</li>
<li>Em um commit, ver quais arquivos foram alterados</li>
<li>Ver o que foi alterado em um arquivo específico dentro de um commit</li>
<li>Verificar o histórico de alteração de um arquivo no repositório (git log arquivo.js)</li>
<li>Alterar o nome e autor de alguns commits, utilizando o <a href="https://github.com/newren/git-filter-repo">git-filter-repo</a></li>
</ul>

<p>Essas tarefas são ótimas pra se familiarizar (ou relembrar) com o andamento de um projeto, ver o ritmo das alterações, quantas mudanças costumam ser embaladas num mesmo commit, e criar um feeling sobre o perfil dos desenvolvedores de um projeto.</p>

<p>Também servem pra organizar e arrumar o histórico e os meta dados dos commits passados, e por isso eu chamo de "House cleaning".</p>

<hr/>
<p>Tags: <a href='tag_git.html'>git</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/house-cleaning-com-git.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/house-cleaning-com-git.html'><span id='count-12366'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/house-cleaning-com-git.html</link>
<guid>https://guilhermegarcia.dev/blog/./house-cleaning-com-git.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Mon, 14 Nov 2022 10:59:55 -0300</pubDate></item>
<item><title>
Busca sem backend - parte 1
</title><description><![CDATA[

<p><abbr title="muito grande;nem li">mg;nl</abbr>: Vamos ver como adicionar um mecanismo de busca em um site estático. Neste post vamos criar um script que gera um arquivo json contendo os conteúdos do site, juntando o título, sumário, tags e palavras chave geradas utilizando a ferramenta <a href="https://github.com/LIAAD/yake">yake</a>.</p>

<p>A barra de busca: essencial, mas de dificil implementação se você não tiver acesso a um banco de dados. </p>

<p>Em sites dinâmicos, no qual o conteúdo é resgatado de um banco de dados a cada acesso, você pode utilizar um formulário, que envia os valores digitados pelo usuário (termos de busca) a um endpoint que as utiliza para realizar uma consulta no banco de dados, e retorna os resultados para o usuário.</p>

<p>Em sites estáticos (como esse, que é hospedado no <a href="https://pages.github.com/">github pages</a>), todo o conteúdo disponível para o usuário precisa ser previamente criado e hospedado. Ou seja, não temos como responder de forma dinâmica às combinações (praticamente infinitas) de palavras chave que um usuário pode buscar.</p>

<p>Para um site pequeno, porém, podemos estruturar o conteúdo em um formato de fácil consulta, como o <a href="https://www.json.org/json-en.html">json</a>, e deixá-lo salvo no servidor. </p>

<p>Daí podemos receber os termos de busca digitados pelo usuário e usar algumas linhas de javascript para carregar o arquivo, aplicar o filtro, e retornar os resultados.</p>

<p>Neste primeiro post, vamos desenvolver um script em python que percorre as publicações do site e formata as informações essenciais em um formato facilmente consultável.</p>

<hr/>
<p>Tags: <a href='tag_python.html'>python</a>, <a href='tag_json.html'>json</a>, <a href='tag_busca.html'>busca</a>, <a href='tag_nlp.html'>nlp</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/busca-sem-backend---parte-1.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/busca-sem-backend---parte-1.html'><span id='count-24794'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/busca-sem-backend---parte-1.html</link>
<guid>https://guilhermegarcia.dev/blog/./busca-sem-backend---parte-1.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Sun, 06 Nov 2022 15:36:37 -0300</pubDate></item>
<item><title>
Comparando json na linha de comando
</title><description><![CDATA[

<p><abbr title="muito grande;nem li">mg;nl</abbr>: vamos usar o <a href="https://vimdoc.sourceforge.net/htmldoc/diff.html">vimdiff</a> e o <a href="https://stedolan.github.io/jq/">jq</a> para comparar arquivos json independente da formatação.</p>

<p>Comparar arquivos json parecidos pode ser complicado. Muitas vezes os arquivos foram formatados com espaçamentos diferentes, ou a diferença não ocorre no mesmo nível hierarquico.</p>

<p>Vamos criar um script simples pra comparar arquivos json diretamente pelo terminal, usando o programa <code>jq</code> e o <code>vimdiff</code>.</p>

<p>Vamos ver também como preparar um script bash pra lidar com erros conhecidos, como arquivos com json inválido ou de outro formato.</p>

<p><aside>Os exemplos usados foram gerados usando <a href="https://json-generator.com">https://json-generator.com</a></aside></p>

<hr/>
<p>Tags: <a href='tag_json.html'>json</a>, <a href='tag_vimdiff.html'>vimdiff</a>, <a href='tag_cli.html'>cli</a>, <a href='tag_bash.html'>bash</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/comparando-json-na-linha-de-comando.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/comparando-json-na-linha-de-comando.html'><span id='count-25112'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/comparando-json-na-linha-de-comando.html</link>
<guid>https://guilhermegarcia.dev/blog/./comparando-json-na-linha-de-comando.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Tue, 25 Oct 2022 22:45:36 -0300</pubDate></item>
<item><title>
A ordem dos exports importa
</title><description><![CDATA[

<p><abbr title="muito grande;nem li">mg;nl</abbr>: quando você utiliza um arquivo index.js para exportar módulos no react, a ordem dos exports pode quebrar seu app se dois módulos importam um ao outro, causando um <code>Uncaught TypeError: _MyModule__WEBPACK_IMPORTED_MODULE_1__ is undefined</code>.</p>

<p>O react tem uma funcionalidade muito boa, o <a href="https://create-react-app.dev/docs/importing-a-component/#absolute-imports">absolute imports</a>, que ajuda você a não precisar ficar lidando com o caminho relativo entre os arquivos.</p>

<p>Se seu app tem uma estrutura do tipo</p>

<pre><code>    - src/
        - components/
        - pages/
</code></pre>

<p>Você pode, num arquivo em <code>src/pages/Home.jsx</code>, importar módulos de duas formas</p>

<pre><code>    // bad! &gt;:(
    import { ButtonGroup } from '../components/ButtonGroup';
    import { MyButton } from '../components/RadioGroup';

    // good! &gt;:)
    import { ButtonGroup, MyButton } from 'components';
</code></pre>

<p>Basta você largar um arquivo <code>jsconfig.json</code> na raíz do seu projeto, passando o diretório <code>src/</code> como <code>baseUrl</code>:</p>

<pre><code>    {
      "compilerOptions": {
        "baseUrl": "src"
      },
      "include": ["src"]
    }
</code></pre>

<p>Porém existem algum gotchas quando você começa a agrupar seus exports.</p>

<hr/>
<p>Tags: <a href='tag_react.html'>react</a>, <a href='tag_javascript.html'>javascript</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/a-ordem-dos-exports-importa.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/a-ordem-dos-exports-importa.html'><span id='count-17220'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/a-ordem-dos-exports-importa.html</link>
<guid>https://guilhermegarcia.dev/blog/./a-ordem-dos-exports-importa.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Wed, 12 Oct 2022 01:57:25 -0300</pubDate></item>
<item><title>
Remova o feed do github
</title><description><![CDATA[

<p><abbr title="muito grande;nem li">mg;nl</abbr>: vamos criar um bookmarklet pra remover o feed da página inicial do github.</p>

<p>Se você é como eu, provavelmente já entrou no seguinte loop:</p>

<ol>
<li>Você fica com dúvida sobre um projeto hospedado no github</li>
<li>Você acessa <a href="https://github.com">https://github.com</a>.</li>
<li>Você fica interessado no que as pessoas andaram fazendo, e acaba clicando em alguma coisa.</li>
<li>Você mata a curiosidade e sai do github.</li>
<li>????</li>
<li>Você lembra da dúvida sobre o projeto</li>
<li>repeat</li>
</ol>

<p>Vamos remover a distração da homepage do github usando um pouco de javascript.</p>

<hr/>
<p>Tags: <a href='tag_bookmarklet.html'>bookmarklet</a>, <a href='tag_javascript.html'>javascript</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/remova-o-feed-do-github.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/remova-o-feed-do-github.html'><span id='count-22818'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/remova-o-feed-do-github.html</link>
<guid>https://guilhermegarcia.dev/blog/./remova-o-feed-do-github.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Mon, 10 Oct 2022 20:53:57 -0300</pubDate></item>
<item><title>
Interceptando tokens com puppeteer
</title><description><![CDATA[

<p><abbr title="muito grande; nem li">mg;nl</abbr>: vamos ver como automatizar o login em um app e interceptar as requisições realizadas, com o objetivo de acessar os tokens gerados pelo front end de uma aplicação.</p>

<p>Digamos que você esteja trabalhando com uma API que exige autenticação.</p>

<p>Você consegue autenticar pelo frontend, mas gostaria de uma forma automatizada de acessar o token, para trabalhar
com as requisições pelo terminal, ou via postman/insomnia:</p>

<pre><code>    curl -X POST -H 'Bearer tokensecretogeradonofrontend' https://api-autenticada.net/resources
</code></pre>

<p>Dependendo da solução de identidade e autenticação utilizada na API, você pode tentar reproduzir as requisições e gerar o token no seu formato final.</p>

<p>Mas alguns provedores, como o <a href="https://www.okta.com/">Okta</a> ou o <a href="https://www.keycloak.org/">Keycloak</a> dificultam essa tática, pois envolvem o uso de <a href="https://pt.wikipedia.org/wiki/Nonce">nonces</a> ou processamento adicional dos valores trocados entre cliente e servidor.</p>

<p>Essas etapas são de difícil reprodução, e podem tomar muito tempo.</p>

<p>Uma alternativa é a automatização do acesso realizado no front end com um navegador <code>headless</code>, como o puppeteer.</p>

<hr/>
<p>Tags: <a href='tag_node.html'>node</a>, <a href='tag_puppeteer.html'>puppeteer</a>, <a href='tag_oauth2.html'>oauth2</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/interceptando-tokens-com-puppeteer.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/interceptando-tokens-com-puppeteer.html'><span id='count-9818'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/interceptando-tokens-com-puppeteer.html</link>
<guid>https://guilhermegarcia.dev/blog/./interceptando-tokens-com-puppeteer.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Mon, 10 Oct 2022 10:48:57 -0300</pubDate></item>
<item><title>
PoC: Stream de videos com javascript no navegador
</title><description><![CDATA[

<p><abbr title="muito grande; nemli">mg;nl</abbr>: vamos desenvolver um reprodutor de vídeos utilizando a API MediaSource do navegador e o conceito de fragmentação de vídeos, no modelo utilizado por sites como twitter, facebook e netflix.</p>

<p>Ao acessar sites com stream de vídeo, como twitter, facebook ou netflix, e visualizar um vídeo, você pode se deparar com duas situações: Na primeira, o vídeo está encapsulado em uma tag <code>&lt;video&gt;</code>, com um <code>src</code> ou algumas tags <code>&lt;source&gt;</code>, indicando a URL do vídeo.</p>

<p>Neste caso, você pode facilmente, inspecionando a tela, copiar a URL do vídeo e abrí-la em outra aba, ou salvar no seu computador.</p>

<p>Por exemplo: <a href="https://twitter.com/TheOtaking/status/1507809616993742848">https://twitter.com/TheOtaking/status/1507809616993742848</a></p>

<p>O GIF mostrado na página é, na verdade, um mp4, e, inspecionando a estrutura do html, descobrimos que ele está no seguinte formato:</p>

<pre><code>&lt;video preload="auto" playsinline="" aria-label="Embedded video" disablepictureinpicture="" style="width: 100%; height: 100%; position: absolute; background-color: black; top: 0%; left: 0%; transform: rotate(0deg) scale(1.005);" poster="https://pbs.twimg.com/tweet_video_thumb/FOzEMPDXEAEE_e5.jpg" src="https://video.twimg.com/tweet_video/FOzEMPDXEAEE_e5.mp4" type="video/mp4"&gt;&lt;/video&gt;
</code></pre>

<p>Você pode facilmente salvar a URL <a href="https://video.twimg.com/tweet_video/FOzEMPDXEAEE_e5.mp4">https://video.twimg.com/tweet_video/FOzEMPDXEAEE_e5.mp4</a>, reproduzí-la em outros ambientes, ou fazer o download do arquivo.</p>

<p>Na segunda situação, você também encontra uma tag <code>video</code>, mas seu atributo <code>src</code> não é uma URL comum: se trata de um blob.</p>

<p>Exemplo: <a href="https://twitter.com/TheOtaking/status/1507278342176882730">https://twitter.com/TheOtaking/status/1507278342176882730</a></p>

<p>O vídeo possui os controles habilitados, e, inspecionando a página, sua estrutura é a seguinte:</p>

<pre><code>&lt;video preload="none" playsinline="" aria-label="Embedded video" disablepictureinpicture="" style="width: 100%; height: 100%; position: absolute; background-color: black; top: 0%; left: 0%; transform: rotate(0deg) scale(1.005);" poster="https://pbs.twimg.com/ext_tw_video_thumb/1507278264003440640/pu/img/1OLNuDRaCHoKzs1e.jpg" src="blob:https://twitter.com/dfc0270a-52b1-4ea8-a49d-bc9939732deb"&gt;&lt;/video&gt;
</code></pre>

<p>Se você tentar acessar a URL <blob:https://twitter.com/dfc0270a-52b1-4ea8-a49d-bc9939732deb>, ou mesmo <a href="https://twitter.com/dfc0270a-52b1-4ea8-a49d-bc9939732deb">https://twitter.com/dfc0270a-52b1-4ea8-a49d-bc9939732deb</a>, vai receber um erro de página não encontrada.</p>

<p>Neste post, vamos entender o funcionamento das URLs blob, qual os benefícios do seu uso, e desenvolver uma prova de conceito mostrando como implementar uma funcionalidade de stream em javascript.</p>

<hr/>
<p>Tags: <a href='tag_streaming.html'>streaming</a>, <a href='tag_javascript.html'>javascript</a>, <a href='tag_node.html'>node</a>, <a href='tag_poc.html'>poc</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/poc-stream-de-videos-com-javascript-no-navegador.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/poc-stream-de-videos-com-javascript-no-navegador.html'><span id='count-12726'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/poc-stream-de-videos-com-javascript-no-navegador.html</link>
<guid>https://guilhermegarcia.dev/blog/./poc-stream-de-videos-com-javascript-no-navegador.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Sat, 26 Mar 2022 19:40:00 -0300</pubDate></item>
<item><title>
Apps de linha de comando em dart
</title><description><![CDATA[

<p><abbr title="muito grande;nem li">mg;nl</abbr>: Vamos dar sequência ao app iniciado <a href="https://guilhermegarcia.dev/blog/oauth2-pela-linha-de-comando-em-dart.html">neste post</a>, explorando ferramentas da linguagem dart para tornar nosso aplicativo mais interativo, lendo e escrevendo input do usuário e arquivos, assim como permitindo ao usuário escolher entre possibilidades que alteram o fluxo do app.</p>

<p>No <a href="https://guilhermegarcia.dev/blog/oauth2-pela-linha-de-comando-em-dart.html">post anterior</a> desenvolvemos um aplicativo que autentica o usuário através do protocolo OAuth2, e, com as permissões concedidas, gera uma listagem dos seus repositórios, públicos e privados, com o link para acessá-los no GitHub.</p>

<p>Neste post, vamos extender algumas dessas funcionalidades, focando em tornar sua utilização mais fácil e intuitíva, facilitando o processo de configuração e partindo do princípio que o usuário final não possui conhecimentos de programação.</p>

<p>Se você quiser ir programando junto, nosso ponto de partida é o <a href="https://github.com/guites/dart-github-app/tree/oauth2_flux">branch oauth2_flux deste repositório</a>.</p>

<p>O código finalizado pode ser encontrado no branch <a href="https://github.com/guites/dart-github-app/tree/add_models">add_models</a></p>

<hr/>
<p>Tags: <a href='tag_dart.html'>dart</a>, <a href='tag_cli.html'>cli</a>, <a href='tag_api.html'>api</a>, <a href='tag_github.html'>github</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/apps-de-linha-de-comando-em-dart.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/apps-de-linha-de-comando-em-dart.html'><span id='count-26991'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/apps-de-linha-de-comando-em-dart.html</link>
<guid>https://guilhermegarcia.dev/blog/./apps-de-linha-de-comando-em-dart.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Mon, 21 Mar 2022 22:49:43 -0300</pubDate></item>
<item><title>
OAuth2 pela linha de comando em Dart
</title><description><![CDATA[

<p><abbr title="muito grande; nem li">mg;nl</abbr>: vamos criar um app que autentica o usuário no GitHub via OAuth2 pela linha de comando, utilizando Dart.</p>

<p>Se você já utilizou aplicações como o heroku-cli, já experienciou o processo de autenticação OAuth2 pela linha de comando.</p>

<p>Você inicia o processo com um comando, por exemplo</p>

<pre><code>    heroku login
</code></pre>

<p>E é direcionado para uma página da web onde você confirma as permissões necessárias para o aplicativo, digitando um login e senha.</p>

<p>Depois, a página mostra uma mensagem de que tudo ocorreu bem, e que você pode voltar para a linha de comando.</p>

<p>Neste post vamos ver como esse processo pode ser realizado utilizando Dart, criando um aplicativo que lista os repositórios da sua conta no GitHub.</p>

<hr/>
<p>Tags: <a href='tag_dart.html'>dart</a>, <a href='tag_github.html'>github</a>, <a href='tag_oauth2.html'>oauth2</a>, <a href='tag_api.html'>api</a></p>
<p id='twitter'><a href='http://twitter.com/intent/tweet?url=https://guilhermegarcia.dev/blog/oauth2-pela-linha-de-comando-em-dart.html&text=&lt;Escreva seu comentário aqui mas mantenha a url para outras pessoas seguirem o comentário&gt;&via=gui_garcia67'>Comentários? Tweet</a> 
<a href='https://twitter.com/search?q=https://guilhermegarcia.dev/blog/oauth2-pela-linha-de-comando-em-dart.html'><span id='count-7667'></span></a>&nbsp;</p>
]]></description><link>https://guilhermegarcia.dev/blog/oauth2-pela-linha-de-comando-em-dart.html</link>
<guid>https://guilhermegarcia.dev/blog/./oauth2-pela-linha-de-comando-em-dart.html</guid>
<dc:creator>Guilherme Garcia</dc:creator>
<pubDate>Tue, 08 Mar 2022 00:44:01 -0300</pubDate></item>
</channel></rss>
